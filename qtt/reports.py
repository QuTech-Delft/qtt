import qtpy
# print(qtpy.API_NAME)

import numpy as np
import scipy
import os
import sys
import copy
import logging
import time
import qcodes
import qcodes as qc
import datetime

# import qtpy.QtGui as QtGui
# import qtpy.QtWidgets as QtWidgets

import matplotlib.pyplot as plt

try:
    from urllib import pathname2url as pathname2url
except:
    from urllib.request import pathname2url as pathname2url

from qtt.tools import tilefigs
import qtt.tools
from qtt.algorithms.gatesweep import analyseGateSweep
from qtt.algorithms.onedot import onedotGetBalance

from qtt.algorithms.onedot import onedotGetBalanceFine
import qtt.live

from qtt.data import experimentFile
from qtt.algorithms.coulomb import coulombPeaks
from qtt.legacy import saveImage, analyse2dot

import webbrowser
import dateutil
import qtt.markup as markup
import copy
import traceback

from qtt.legacy import analyse2dot

from qtt.tools import diffImageSmooth, scanTime
from qtt.scans import experimentFile, pinchoffFilename
from qtt.data import *
from qtt import pgeometry
from qtt.algorithms.generic import *

import qtt.legacy  # should be removed in the future

#%%


def reportTemplate(title):
    """ Create a markup object for a HTML page """
    page = markup.page()
    page.init(title=title,
              css=(), lang='en', bodyattrs=dict({'style': 'padding-left: 3px;'}),
              header="<h1>%s</h1><br/><span><a href=\"mailto:pieter.eendebak@tno.nl\">pieter.eendebak@tno.nl</a></span>" % title, metainfo=({'keywords': 'qutech, quantum dot, tuning, TNO'}),
              footer="<!-- End of page >")
    # page.h1(title)
    return page

#%%
import traceback
import logging

from qtt.data import loadExperimentData


def generateOneDotReport(one_dots, xdir, resultsdir, verbose=1):
    """ Generate a report on scanned one-dots
    The data are generated by 1dot_script.py
    """
    #%
    lst = pmatlab.findfiles(xdir, '.*sweep-2d.*pickle')
    print('found %d 2d data files' % len(lst))

    if verbose >= 2:
        lst1 = findfiles(xdir, '.*sweep-1d.*pickle')
        print('found %d 1D data files' % len(lst1))

    page = markup.page()
    page.init(title="Results for one-dots",
              css=(), lang='en', bodyattrs=dict({'style': 'padding-left: 3px;'}),
              header="<h1>Qutech: one-dots</h1>", metainfo=({'keywords': 'qutech, 1-dot, tno'}),
              footer="<!-- End of page >")

    for idx, od in enumerate(one_dots):
        time.sleep(0.01)
        if 0:
            pp = '%s-sweep-2d-.pickle' % (od['name'])
            pfile = os.path.join(xdir, pp)
            if not os.path.isfile(pfile):
                continue
            dd2d = pickle.load(open(pfile, 'rb'))

        dstr = '%s-sweep-2d' % (od['name'])
        dd2d = loadExperimentData(resultsdir, tag='one_dot', dstr=dstr)
        if dd2d is None:
            continue
        metadata2d = dd2d.metadata

        tag = 'one_dot'
        pathdd2d = experimentFile(resultsdir, tag=tag, dstr=dstr)

        if verbose:
            print('### generateOneDotReport: one-dot: %s' % od['name'])
        page.h2('One-dot: %s' % od['name'])
        gg = od['gates']

        imfile0 = [None] * 3
        imfile = [None] * 3
        picklefiles = []
        for jj, g in enumerate(gg):
            pp = pinchoffFilename(g, od=None)
            pfile = os.path.join(xdir, pp)
            # dd = qtt.loadQttData(pfile)
            dd, mdata = qtt.loadDataset(pfile)

            # print(dd.keys())

            picklefiles += [pfile]

            adata = analyseGateSweep(dd, fig=100 + idx, minthr=None, verbose=0)
            # plt.show()
            imfile0[jj] = os.path.join('sweep-%s-%s.jpg' % (od['name'], g))
            imfile[jj] = os.path.join(
                resultsdir, 'sweep-%s-%s.jpg' % (od['name'], g))
            plt.savefig(imfile[jj], quality=82)

            # print(dd['od'])
            pv = adata['pinchvalue']  # dd['od']['pinchvalue'][jj]
            # print('pv gate %s: %s' % (g, pv))

            page.span(
                'Gates: %s, sweep %s from pinch value %.1f to %.1f' % (od['gates'], g, pv, 0))
            page.br()
        for jj, g in enumerate(gg):
            page.a.open(href=picklefiles[jj], style='text-decoration: none;')
            page.img(src=imfile0[jj], width='30%', alt="%s" % od['name'])
            page.a.close()

        dstr = '%s-sweep-plunger' % (od['name'])

        ddplunger = loadExperimentData(resultsdir, tag=tag, dstr=dstr)['dataset']

        # pp='%s-sweep-plunger-.pickle' % (od['name'])
        # pfile=os.path.join(xdir, pp)
        # ddplunger=pickle.load(open(pfile, 'rb') )
        # if type(ddplunger)==tuple:
        #        ddplunger=ddplunger[0]
        od, ptv, pt, ims, lv, wwarea = onedotGetBalance(od, dd2d, verbose=0, fig=None)

        # showODresults(od, dd2d, fig=101)
        xx, vstep, vsweep = show2D(dd2d, fig=101, verbose=1)
        plt.figure(101)
        pmatlab.plotPoints(od['balancepoint'], '.m', markersize=14)
        pmatlab.plotPoints(od['balancepoint0'], '.b', markersize=11)
        pmatlab.plotPoints(od['balancefit'], '--c')
        plt.axis('image')

        if verbose:
            print('# generateOneDotReport: save figure for sensing dot')

        imfile0 = 'sweep-%s-%s.jpg' % (od['name'], '2d')
        imfile = os.path.join(resultsdir, imfile0)
        plt.savefig(imfile, dpi=240, quality=87)
        dscan = scanTime(dd2d)
        page.p('2D sweep on outer gates: scan complete %s' %
               dscan.strftime('%d-%m-%Y %H:%M:%S'))
        try:
            page.p('One-dot scan: gatevalues: %s' %
                   qtt.legacy.printGateValues(metadata2d.get('allgatevalues', dict())))
        except Exception as ex:
            page.p('One-dot scan: gatevalues: ???')

        page.a.open(href=pathdd2d, style='text-decoration: none;')
        page.img(src=imfile0, width='80%', alt="%s" % od['name'])
        page.a.close()

        dstrhi = '%s-sweep-2d-hires' % (od['name'])
        pathdd2dhi = experimentFile(resultsdir, tag=tag, dstr=dstrhi)
        scandata = loadExperimentData(resultsdir, tag='one_dot', dstr=dstrhi)

        scanjob = scandata['scanjob']
        dd2dhi = scandata['dataset']

        if dd2dhi is not None:
            if verbose:
                print('# generateOneDotReport: make figure for hi-res')

            imfile0hires = 'sweep-%s-%s-hires.jpg' % (od['name'], '2d')
            imfilehires = os.path.join(resultsdir, imfile0hires)
            xx, vstep, vsweep = show2D(dd2dhi, fig=101, verbose=1)

            if verbose >= 2:
                pmatlab.plotPoints(od['balancepoint'], '.m', color=(.7, 0, .7), markersize=10, label='balancepoint')

            if 1:
                odhi = scandata['od']

                extentscan, g0, g2, vstep, vsweep, arrayname = dataset2Dmetadata(dd2dhi, verbose=0)
                impixel, tr = dataset2image(dd2dhi, mode='pixel')
                ptv, fimg, tmp = onedotGetBalanceFine(impixel, dd2dhi, verbose=1, fig=None)

                #_, _, _, imhi = get2Ddata(dd2dhi)
                # ptv, fimg, _ = onedotGetBalanceFine( imhi, dd2dhi, verbose=0, fig=None)
                odhi['balancepointfine'] = ptv
            else:
                odhi = scandata['od']

            if 'balancepointfine' in odhi:
                pmatlab.plotPoints(odhi['balancepointfine'], '.m', markersize=14, label='balancepointfine')
            if 'coulombdirection' in odhi:
                ptx = tr.scan2pixel(odhi['balancepointfine'])
                showCoulombDirection(ptx, odhi['coulombdirection'], im=None, fig=101, dd=dd2dhi)
                pass
            plt.axis('image')
            plt.savefig(imfilehires, dpi=200, quality=88)

            page.a.open(href=pathdd2dhi, style='text-decoration: none;')
            page.img(src=imfile0hires, width='80%', alt="%s" % od['name'])
            page.a.close()

       # STOP
        # alldata=dd

        # plunger sweep
        try:
            if verbose:
                print('# generateOneDotReport: make figure for plunger scan')

            ddplungermetadata = ddplunger.metadata
            allgatevalues = ddplungermetadata.get('allgatevalues', None)
            if allgatevalues is None:   # legacy data files
                allgatevalues = ddplunger['gatevalues']

            qtt.scans.plot1D(ddplunger, fig=400, mstyle='.-b')
            plt.figure(400)
            # xx, vstep, vsweep= show2D(dd, fig=101)
            imfile0 = 'sweep-%s-%s.png' % (od['name'], '-plunger')
            imfile = os.path.join(resultsdir, imfile0)
            plt.savefig(imfile)
            page.p('1D sweep on plunger %s: %s=%.1f, %s=%.1f [mV]' % (
                gg[1], gg[0], allgatevalues[gg[0]], gg[2], allgatevalues[gg[2]]))
            page.img(src=imfile0, width='80%', alt="%s" % od['name'])
        except Exception as ex:
            logging.exception(ex)
            print('generateOneDotReport: error with plunger scan ')
            pass

    plt.show()
    page.br(clear='all')
    page.p('End of results')

    fname = os.path.join(resultsdir, 'results.html')
    with open(fname, 'wt') as f:
        f.write(str(page))
        print('written file %s' % f.name)

    return fname


#%%

from qtt.legacy import singleElectronCheck, singleRegion


def generateDoubleDotReport(two_dots, resultsdir, tag=None, verbose=1, sdidx=1):
    """ Generate a report on scanned one-dots
    The data are generated by 1dot_scripy.py
    """
    #%%
    dxdir = os.path.join(resultsdir, 'doubledot')
    lst = pmatlab.findfiles(dxdir, 'scandata-doubledot.*pickle')
    print('found %d data files' % len(lst))

    _ = qtt.tools.mkdirc(os.path.join(resultsdir, 'pictures'))

    # full=2
    xdata = dict()

    htag = tag
    page = markup.page()
    page.init(title="Results for double-dots",
              css=(), lang='en', bodyattrs=dict({'style': 'padding-left: 3px;'}),
              header="<h1>Qutech: double-dots: %s</h1><br/><span><a href=\"mailto:pieter.eendebak@tno.nl\">pieter.eendebak@tno.nl</a></span>" % htag, metainfo=({'keywords': 'qutech, quantum dot, tuning, tno'}),
              footer="<!-- End of page >")

    page.p('<p>Experiment tag: %s</p>' % tag)

    try:
        jobs = loadExperimentData(resultsdir, tag='doubledot', dstr='jobs')
        q = [j['td']['name'] for j in jobs]
    except Exception as e:
        jobs = []
        q = None
        print(resultsdir)
        raise e
        pass

    for idx, td in enumerate(two_dots):
        basefig = 1000 + 100 * idx
        pp = 'doubledot-%s.pickle' % (td['name'])
        pfile = os.path.join(dxdir, pp)
        if not os.path.isfile(pfile):
            # try with gate compensation
            pp = 'doubledot-%s-gc.pickle' % (td['name'])
            pfile = os.path.join(dxdir, pp)

            if not os.path.isfile(pfile):
                print('could not find data for double-dot %s' % td['name'])
                print('   file %s' % pfile)
                continue

        if verbose >= 2:
            print('load file %s' % pfile)
        dd2d = pgeometry.load(pfile)
        if isinstance(dd2d, tuple):
            dd2d = dd2d[0]
        name = td['name']
        xdata[name] = dd2d

        print('### two-dot: %s' % td['name'])
        page.h2('Two-dot: %s' % td['name'])
        gg = td['gates']
        if 0:
            imfile0 = [None] * 3
            imfile = [None] * 3
            for jj, g in enumerate(gg):
                pp = '%s-sweep-1d-%s.pickle' % (od['name'], g)
                pfile = os.path.join(xdir, pp)
                dd = loadqt(pfile)
                # print(dd.keys())

                adata = analyseGateSweep(dd, fig=100 + idx, minthr=100, maxthr=800, verbose=2)
                # plt.show()
                imfile0[jj] = os.path.join('sweep-%s-%s.png' % (od['name'], g))
                imfile[jj] = os.path.join(resultsdir, 'sweep-%s-%s.png' % (od['name'], g))
                plt.savefig(imfile[jj])

                # print(dd['od'])
                pv = adata['pinchvalue']  # dd['od']['pinchvalue'][jj]
                # print('pv gate %s: %s' % (g,pv ) )

                page.span('Gates: %s, sweep %s from pinch value %.1f to %.1f' % (od['gates'], g, pv, 0))
                page.br()
            for jj, g in enumerate(gg):
                page.img(src=imfile0[jj], width='30%', alt="%s" % od['name'])

        # pp='scandata-tunesd-%s.pickle' % (td['name'])

        dstrplunger = 'tunesd-%s-sd%d' % (td['name'], sdidx)
        pp = experimentFile(tag='', dstr=dstrplunger)

        pfileplunger = os.path.join(dxdir, pp)

        ddplunger = qtt.load_data(pfileplunger)
        if isinstance(ddplunger, tuple):
            ddplunger = ddplunger[0]

        if ddplunger is None:
            print('could not load file %s' % pfileplunger)

        # x=ddplunger['data_array'][:,0]; y=ddplunger['data_array'][:,2];
        x, y = qtt.data.dataset1Ddata(ddplunger)
        istep = qtt.data.dataset_get_istep(ddplunger)

        goodpeaks = coulombPeaks(x, y, verbose=1, fig=basefig, plothalf=True, istep=istep)
        if not basefig is None:
            plt.figure(basefig)
            plt.xlabel(qtt.data.dataset_labels(ddplunger, 'x'))

        imfilerel, imfile = qtt.legacy.saveImage(resultsdir, 'sdtune-%s' % td['name'], basefig)

        st = scanTime(ddplunger)
        if st is None:
            st = 'date ?'
        else:
            st = st.strftime('%d-%m-%Y %H:%M:%S')
        page.p('Tuning of sensing dot: scan complete %s' % st)
        # dd2d['scantime']
        page.a.open(href=pfileplunger, style='text-decoration: none;')
        page.img(src=imfilerel, width='80%', alt="sd %s" % td['name'])
        page.a.close()

        # xx, vstep, vsweep= show2D(dd2d, fig=101, verbose=1)
        xx, vstep, vsweep = show2D(dd2d, fig=basefig + 1, verbose=1, dy=0, sigma=.8)

        # import posixpath

        imfilerel, imfile = saveImage(resultsdir, 'doubledot-%s' % td['name'], basefig + 1)

        page.p('Double-dot scan: scan complete %s' % scanTime(dd2d).strftime('%d-%m-%Y %H:%M:%S'))
        page.p('Double-dot scan: gatevalues: %s' % qtt.legacy.printGateValues(dd2d.metadata.get('allgatevalues', dict({}))))
        page.a.open(href=pathname2url(pfile), style='text-decoration: none;')
        page.img(src=pathname2url(imfilerel), width='80%', alt="sd %s" % td['name'])
        page.a.close()

        try:
            jindex = q.index(td['name'])
            # jobs[jindex]
            tddata = jobs[jindex]['td']['tddata']
            page.p()
            page.add('Two-dot shared gate: %s' % (str(tddata['v'])))
            page.br()
            page.add('Two-dot gatecorrection: %s' % (str(tddata['gatecorrection'])))
            page.p.close()
        except Exception as e:
            print(e)
            pass

        # analyse two-dot scan
        pt, res = analyse2dot(dd2d, fig=basefig + 10)
        imfilerel, imfile = saveImage(resultsdir, 'doubledot-zerozero-%s' % td['name'], basefig + 10, tight=.1)

        # rr0=singleRegion(pt, imx, istep)
        imx2 = res['imx']
        istep = res['istep']
        check, rr0, resSE, thr = singleElectronCheck(pt, imx2, istep, fig=basefig + 800, verbose=2)
        plt.gray()
        plt.figure(basefig + 810)
        plt.axis('off')
        plt.title('Single electron check', fontsize=14)
        imfilerelSE, imfileSE = saveImage(resultsdir, 'doubledot-single-electron-%s' % td['name'], basefig + 810, tight=.1)
        plt.jet()
        if idx >= 20:
            xdata['imx2'] = imx2
            xdata['pt'] = pt
            return _, xdata
            pdb.set_trace()

        page.p()
        page.add('Double-dot scan: zero-zero %s' % (str(res['ptmv']), ))
        page.br()
        page.add('Double-dot scan:single electron regime check <b>%s</b> (0: bad, 1: undetermined, 2: good)' % (check, ))
        page.p.close()
        page.img(src=pathname2url(imfilerel), width='50%', style='float: left;', alt="sd %s" % td['name'])
        page.img(src=pathname2url(imfilerelSE), width='40%', style='margin-top: 30px; float: left;', alt="sd %s" % td['name'])
        page.br(clear='both')

    plt.show()
    page.br(clear='all')
    page.p('End of results')

    with open(os.path.join(resultsdir, 'results-doubledot.html'), 'wt') as f:
        f.write(str(page))
        print('generateDoubleDotReport: written file %s' % f.name)

    return f.name, xdata
